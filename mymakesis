#! /bin/bash

PROG="$0"

show_help() {
  SEP='" ) # '
  MARK_BEGIN="PARAMETER_BEGIN"
  MARK_END="PARAMETER_END"
  HELP="$(grep -A 999 "${MARK_BEGIN}" "${PROG}" | grep -B 999 "${MARK_END}")"
  HELP="$(echo "${HELP}" | grep "${SEP}")"
  echo "${HELP}" | while read LINE; do
    echo "Parameter: ${LINE/\"/}" | sed "s:${SEP}::g"
  done
}

# PARAMETER_BEGIN
parse_param() {
  while [ ! -z ${1} ]; do
    case "${1}" in
      "--help" ) #           Show a little help
	show_help
	exit
	;;
      "--app" ) #            Set the application name to the next argument
	shift
	APP="${1}"
	;;
      "--pkg-file" ) #       Use the next argument as pkg file
	shift
	PKG_FILE="${1}"
	;;
      "--sdk-version" ) #    Use the given SDK version
	shift
	SDK_VERSION="${1}"
	;;
      "--make-target" ) #    The name of the make target (all, clean)
	shift
	MAKE_TARGET="${1}"
	;;
      "--sis-file" ) #       The sis filename
	shift
	SISFILE="${1}"
	;;
      "--sisx-file" ) #      The sisx filename
	shift
	SISXFILE="${1}"
	;;
      "--cer-file" ) #       The name of the certification file
	shift
	CERFILE="${1}"
	;;
      "--key-file" ) #       The name of the key file
	shift
	KEYFILE="${1}"
	;;
      "--sign-pwd" ) #       The sign password
	shift
	SIGNPWD="${1}"
	;;
      * )
	echo "parameter ${1} not implemented"
	exit
	;;
    esac
    shift
  done
}
# PARAMETER_END

call_cmd() {
  echo "$*"
  $@
}

parse_param $@

#
# Print the current configuration and
# set default parameter values if not yet set.
#
echo "app:          ${APP="test"}"
echo "pgk file:     ${PKG_FILE="${APP}.pkg"}"
echo "sdk version:  ${SDK_VERSION="5.0"}"
echo "make target:  ${MAKE_TARGET="all"}"
echo "sis file:     ${SISFILE="${APP}.sis"}"
echo "sisx file:    ${SISXFILE="${APP}.sisx"}"
echo "cert file:    ${CERFILE="mycert.cer"}"
echo "key file:     ${KEYFILE="mykey.key"}"
echo "sign pwd:     ${SIGNPWD="0000"}"

exit

case "${SDK_VERSION}" in
  "5.0" )
    PLATFORM="gcce"
    TARGET="urel"
    DO_SIGN="true"
    ;;
  "3.2" )
    PLATFORM="gcce"
    TARGET="urel"
    DO_SIGN="true"
    ;;
  "2.0" )
    PLATFORM="armi"
    TARGET="urel"
    DO_SIGN="false"
    ;;
  * )
    PLATFORM="gcce"
    TARGET="urel"
    DO_SIGN="true"
    ;;
esac

export PATH=${HOME}/symbian/gnupoc/bin:${PATH}
export PLATFORM=${PLATFORM}
export TARGET=${TARGET}

export EPOCROOT=${HOME}/symbian/gnupoc/symbian-sdks/${SDK_VERSION}/
echo "epoc root: [${EPOCROOT}]"

STARTTIME=`date +%s`

case ${MAKE_TARGET} in
  all)
    cd group
    call_cmd bldmake bldfiles
    call_cmd abld build ${PLATFORM} ${TARGET}
    cd ..	
	
    cd sis
    PKG_FILE_TMP=__${PKG_FILE}
    cp ${PKG_FILE} ${PKG_FILE_TMP}
    	  
    sed s:'$(EPOCROOT)':${EPOCROOT}:g -i ${PKG_FILE_TMP}
    sed s:'$(PLATFORM)':${PLATFORM}:g -i ${PKG_FILE_TMP}
    sed s:'$(TARGET)':${TARGET}:g -i ${PKG_FILE_TMP}
    sed s:Epoc32:epoc32:g -i ${PKG_FILE_TMP}

    call_cmd makesis ${PKG_FILE_TMP} ${SISFILE}
    ${DO_SIGN} && call_cmd signsis -p ${SISFILE} ${SISXFILE} ${CERFILE} ${KEYFILE} ${SIGNPWD}

    rm ${PKG_FILE_TMP}
    cd ..
    ;;

  clean)
    call_cmd abld clean ${PLATFORM} ${TARGET}
    call_cmd bldmake clean
    
    END_TIME=`date +%s`
    ELAPSED=`expr $END_TIME - $START_TIME`
    echo ""
    echo "Clean finished - Elapsed time: " `date -d 00:00:$ELAPSED +%H:%M:%S`
    ;;

  *)
    echo "ERROR: Invalid command. Supported commands:"
    echo -e "\tall"
    echo -e "-tclean"
    ;;
esac

ENDTIME=`date +%s`
ELAPSED=`expr ${ENDTIME} - ${STARTTIME}`
echo -e "\nFinished - Elapsed time: `date -d 00:00:${ELAPSED} +%H:%M:%S`"
